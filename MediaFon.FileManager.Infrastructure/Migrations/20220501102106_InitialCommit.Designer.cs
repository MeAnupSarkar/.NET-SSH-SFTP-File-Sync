// <auto-generated />
using System;
using MediaFon.FileManager.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MediaFon.FileManager.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220501102106_InitialCommit")]
    partial class InitialCommit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MediaFon.FileManager.Domain.Entity.Directory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("HasAccessPermission")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastAccessTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastWriteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastWriteTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Directories");
                });

            modelBuilder.Entity("MediaFon.FileManager.Domain.Entity.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("DirectoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Extention")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("HasAccessPermission")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAccessTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastAccessTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastWriteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastWriteTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MediaFon.FileManager.Domain.Entity.File", b =>
                {
                    b.HasOne("MediaFon.FileManager.Domain.Entity.Directory", "Directory")
                        .WithMany()
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Directory");
                });
#pragma warning restore 612, 618
        }
    }
}
